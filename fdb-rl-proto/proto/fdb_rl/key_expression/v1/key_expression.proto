syntax = "proto3";

package fdb_rl.key_expression.v1;

// Protobuf message field is specified here [1].
//
// Java RecordLayer uses field name. In protobuf, field names are not
// serialized on the wire and can be renamed. While this is more
// ergonomical, it is also brittle, especially when the semantics of
// the name changes and is assigned to a new tag number.
//
// In our case we use field number and that maps directly to the "tag"
// in the binary format.  .
//
// [1]: https://protobuf.com/docs/language-spec#fields
message Field {
  // How to handle repeated field.
  message FieldFanType {
    // Create an index value for each value of the field.
    message FanOut {}

    // Convert a repeated field into a single list.
    //
    // This does not cause the number of index values to increase.
    message Concatenate {}

    // Required.
    oneof field_fan_type {
      FanOut fan_out = 1;
      Concatenate concatenate = 2;
    }
  }

  // Field presence is the notion of whether a protobuf field has a
  // value [1]. As of release 3.15, in `proto3`, the default is
  // *explicit presence*, which is managed by `optional` label.
  //
  // NOTE: We *only* support `proto3` explicit presence discipline.
  //
  // Following table outlines how presence is tracked for fields in
  // `proto3` [2]. (Note: 'Singular bool' field type is missing in the
  // link, but has been added in the following table).
  //
  // |----------------------------------------------+----------+----------|
  // | Field type                                   | optional | Explicit |
  // |                                              |          | Presence |
  // |----------------------------------------------+----------+----------|
  // | Singular numeric (integer or floating point) | No       |          |
  // | Singular enum                                | No       |          |
  // | Singular string or bytes                     | No       |          |
  // | Singular bool                                | No       |          |
  // | Singular numeric (integer or floating point) | Yes      | Yes      |
  // | Singular enum                                | Yes      | Yes      |
  // | Singular string or bytes                     | Yes      | Yes      |
  // | Singular bool                                | Yes      | Yes      |
  // | Singular message                             | Yes      | Yes      |
  // | Singular message                             | No       | Yes      |
  // | Repeated                                     | N/A      |          |
  // | Oneofs                                       | N/A      | Yes      |
  // | Maps                                         | N/A      |          |
  // |----------------------------------------------+----------+----------|
  //
  // As you can see from the above table, presence is *always* tracked
  // for `message` and `oneof`. This behavior was previously used to
  // implement optional primitive types in
  // `google/protobuf/wrappers.proto`. Wrapper types is now deprecated
  // and should not be used [3].
  //
  // Under explicit presence discipline, when we have a missing value
  // (`NULL`), it would be interpreted as follows.
  //
  // [1]: https://protobuf.dev/programming-guides/field_presence/#background
  // [2]: https://protobuf.dev/programming-guides/field_presence/#presence-in-proto3-apis
  // [3]: https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
  message FieldNullInterpretation {
    // Missing value (`NULL`) are allowed multiple times in unique
    // index (PostgreSQL `NULLS DISTINCT`, Java RecordLayer
    // `NOT_UNIQUE`). This is the default for PostgreSQL and Java
    // RecordLayer.
    message Distinct {}

    // Missing value (`NULL`) *cannot* be repeated in a unique
    // index. This is very restrictive as a column can have only one
    // `NULL` value. (PostgreSQL `NULLS NOT DISTINCT`, Java
    // RecordLayer `UNIQUE`).
    message NotDistinct {}

    // Field is not `NULL`. As mentioned in the above table, in
    // `proto3` this is only possible for a singular numeric, enum,
    // bytes, string, bool type.
    message NotNull {}

    // Required.
    oneof field_null_interpretation {
      Distinct distinct = 1;
      NotDistinct not_distinct = 2;
      NotNull not_null = 3;
    }
  }

  // Required.
  //
  // Labeling this as `optional`, so that in Rust we get a
  // `Option<u32>` type, and we do not accidentally set it to `0`.
  optional uint32 field_number = 1;

  // Required.
  oneof field_label {
    // Field is not a `repeated` field.
    FieldNullInterpretation null_interpretation = 2;
    // Field is a `repeated` field.
    FieldFanType fan_type = 3;
  }
}

// TODO
message Nest {
  // Required.
  Field parent = 1;
  // Required.
  KeyExpression child = 2;
}

// TODO
message Concat {
  repeated KeyExpression children = 1;
}

// TODO
message KeyExpression {
  // Required.
  oneof key_expression {
    Field field = 1;
    Nest nest = 2;
    Concat concat = 3;
  }
}
